---
- hosts: all

  vars:
    ansible_winrm_server_cert_validation: ignore
    pdc_administrator_password: "{{ ansible_password }}"
    pdc_domain: demo.lab
    pdc_netbios: DEMO

  tasks:
    - name: Print ansible_password
      ansible.builtin.debug:
        msg: "{{ ansible_password }}"

    - name: Print pdc_administrator_password
      ansible.builtin.debug:
        msg: "{{ pdc_administrator_password }}"

    - name: Install Active Directory
      ansible.windows.win_feature:
          name: AD-Domain-Services
          include_management_tools: yes
          include_sub_features: yes
          state: present
      register: install_ad_domain_services

    - name: Reboot if installing AD-Domain-Services feature requires it
      ansible.windows.win_reboot:
      when: install_ad_domain_services.reboot_required
      register: win_reboot

    - name: Wait for the reboot to complete if there was a change.
      wait_for_connection:
        sleep: 5
        delay: 30
        timeout: 300
      when: win_reboot is changed

    - name: Create Domain
      ansible.windows.win_domain:
        dns_domain_name: "{{ pdc_domain }}"
        safe_mode_password: "{{ ansible_password }}"
      register: create_domain

    - name: Reboot if Create Domain
      ansible.windows.win_reboot:
      when: create_domain.reboot_required
      register: win_reboot

    - name: Wait for the reboot to complete if there was a change.
      wait_for_connection:
        sleep: 5
        delay: 30
        timeout: 300
      when: win_reboot is changed

    - name: ensure ADWS service is started
      win_service:
        name: ADWS
        state: started
      register: service_status_results

    - name: Collect ADWS service status
      debug:
        msg: "{{ service_status_results }}"

    - name: Ensure the UserPrincipalName of {{ pdc_netbios }}\{{ ansible_user }} is set to {{ ansible_user }}@{{ pdc_domain }}
      win_domain_user:
        name: "{{ ansible_user }}"
        upn: "{{ ansible_user }}@{{ pdc_domain }}"
        domain_username: "{{ pdc_netbios }}\\{{ ansible_user }}"
        domain_password: "{{ ansible_password }}"
        update_password: on_create

    - name: Wait for the reboot to complete if there was a change.
      wait_for_connection:
        sleep: 5
        delay: 30
        timeout: 300
      when: create_domain is changed

    - name: Add Terminal Server License Servers to Network Service
      ansible.windows.win_group_membership:
        name: Terminal Server License Servers
        members:
          - Network Service
        state: present

    # - name: Set Licensing Mode
    #   ansible.windows.win_shell: |
    #     New-ItemProperty -Path 'HKLM:\SOFTWARE\Policies\Microsoft\Windows NT\Terminal Services' -Name 'LicensingMode' -Value 4 -PropertyType 'DWord'

    - name: Set Licensing Mode
      win_regedit:
        path: HKLM:\SOFTWARE\Policies\Microsoft\Windows NT\Terminal Services
        name: LicensingMode
        data: 4
        type: dword

    # - name: Set License Servers
    #   ansible.windows.win_shell: |
    #     New-ItemProperty -Path 'HKLM:\SOFTWARE\Policies\Microsoft\Windows NT\Terminal Services' -Name 'LicenseServers' -Value 'localhost' -PropertyType 'String'

    - name:  Set License Servers
      win_regedit:
        path: HKLM:\SOFTWARE\Policies\Microsoft\Windows NT\Terminal Services
        name: LicenseServers
        data: localhost
        type: String

    # - name: Enable Remote Desktop
    #   ansible.windows.win_shell: |
    #     Set-ItemProperty 'HKLM:\SYSTEM\CurrentControlSet\Control\Terminal Server' -Name 'fDenyTSConnections' -Value 0
    #     Set-ItemProperty 'HKLM:\SYSTEM\CurrentControlSet\Control\Terminal Server' -Name 'fSingleSessionPerUser' -Value 0
    #     Set-ItemProperty 'HKLM:\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name 'UserAuthentication' -Value 0

    - name: Enable Remote Desktop
      win_regedit:
        path: HKLM:\SYSTEM\CurrentControlSet\Control\Terminal Server
        name: fDenyTSConnections
        data: 0
        type: dword

    - name: Allow Multiple RDP Sessions
      win_regedit:
        path: HKLM:\SYSTEM\CurrentControlSet\Control\Terminal Server
        name: fSingleSessionPerUser
        data: 0
        type: dword

    - name: Disable Network Level Authentication
      win_regedit:
        path: HKLM:\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp
        name: UserAuthentication
        data: 0
        type: dword

    # REM Disable the Network Level Authentication
    # reg add "HKLM\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp" /v SecurityLayer /t REG_DWORD /d 0 /f
    # reg add "HKLM\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp" /v UserAuthentication /t REG_DWORD /d 0 /f
    # reg add "HKLM\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp" /v fAllowSecProtocolNegotiation /t REG_DWORD /d 0 /f

    - name: Install Remote Desktop Session Host with sub features
      ansible.windows.win_feature:
        name: RDS-RD-Server
        state: present
        include_sub_features: yes
      register: install_remote_desktop_services

    - name: Reboot if installing RDS-RD-Server feature requires it
      ansible.windows.win_reboot:
      when: install_remote_desktop_services.reboot_required
      register: win_reboot

    - name: Wait for the reboot to complete if there was a change.
      wait_for_connection:
        sleep: 5
        delay: 30
        timeout: 300
      when: win_reboot is changed
